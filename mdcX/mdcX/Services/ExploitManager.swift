//
//  ExploitManager.swift
//  mdcX
//
//  Created by 이지안 on 5/9/25.
//

import Foundation

class ExploitManager {
    static let shared = ExploitManager()
    var logStore: LogStore?
    private init() {}

    private func log(_ message: String) {
        logStore?.append(message: message)
    }

    func applyFileZeroTweak(_ tweak: Tweak,
                            zeroAllFilePages: Bool = false,
                            completion: @escaping (_ successCount: Int, _ totalFiles: Int, _ resultsLog: String) -> Void) {
        log("Starting Swift file-zero tweak: \(tweak.name)")

        switch tweak.action {
        case .zeroOutFiles(let paths):
            if paths.isEmpty {
                let emptyPathLog = "Error: No paths specified for tweak '\(tweak.name)'."
                log(emptyPathLog)
                completion(0, 0, "No paths specified.\n")
                return
            }

            let totalFiles = paths.count
            var individualResults = [String?](repeating: nil, count: totalFiles)
            var successAccumulator = 0
            let group = DispatchGroup()
            let accumulatorQueue = DispatchQueue(label: "com.yourapp.ExploitManager.swiftAccumulator")

            for (index, pathString) in paths.enumerated() {
                group.enter()
                DispatchQueue.global(qos: .userInitiated).async {
                    var fileOpSuccess = false
                    var opResultCode: Int32 = -99
                    var fileResultDescription: String

                    if pathString.isEmpty {
                        fileResultDescription = "[(empty path) at index \(index)]: Invalid empty path."
                        opResultCode = 7
                    } else {
                        opResultCode = applySwiftFileZeroExploit(filePath: pathString, zeroAllPages: zeroAllFilePages)
                        if opResultCode == 0 {
                            fileOpSuccess = true
                        }
                        fileResultDescription = "\((pathString as NSString).lastPathComponent): \(fileOpSuccess ? "OK" : "Fail (Swift code: \(opResultCode))")"
                    }
                    
                    individualResults[index] = fileResultDescription
                    
                    if fileOpSuccess {
                        accumulatorQueue.async {
                            successAccumulator += 1
                        }
                    }
                    group.leave()
                }
            }

            group.notify(queue: .main) {
                let finalDetailedLog = "Results for '\(tweak.name)':\n" +
                                       individualResults.compactMap { $0 }.joined(separator: "\n")
                
                self.log("Completed Swift file-zero tweak '\(tweak.name)': \(successAccumulator)/\(totalFiles) succeeded.")
                completion(successAccumulator, totalFiles, finalDetailedLog)
            }
        }
    }
}
